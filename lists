***************************Array based implementation**************************************************
void CreateList(List *pl){
pl->size=0;
} 



int ListEmpty(List *pl){ 
return !pl->size; 
}



int ListFull(List *pl){
return pl->size==MAXLIST;
} 



int ListSize(List *pl){
return pl->size;
}



void DestroyList(List *pl){
pl->size=0;
} 



/*0 <= p <= size*/ 
void InsertList(int p, ListEntry e, List *pl){ 
int i; /*The loop shifts up all the elements in the range [p, size-1] to free the pth location*/ 
for(i=pl->size-1; i>=p; i--) 
pl->entry[i+1]=pl->entry[i];
pl->entry[p]=e; 
pl->size++; } // (n)



/*0<= p <= size-1 and List not empty*/ 
void DeleteList(int p, ListEntry *pe, List *pl){ 
int i;
*pe=pl->entry[p];/*The loop shifts down all the elements in the range [p+1, size-1] to free the pth location*/
for(i=p+1; i<=pl->size-1; i++)
pl->entry[i-1]=pl->entry[i];
pl->size--;
}



/* 0<= p <= size-1*/ 
void RetrieveList(int p, ListEntry *pe, List *pl){
*pe=pl->entry[p]; 
} // (1)



/* 0<= p <= size-1*/ 
void ReplaceList(int p, ListEntry e, List *pl){
pl->entry[p]=e; 
} // (1)



void TraverseList(List* pl, void (*Visit)(ListEntry)){ 
int i;
for(i=0; i<pl->size; i++) (*Visit)(pl->entry[i]);
} // (n) 

*******************************************************linked based implementation*********************************************************

typedef struct listnode{
ListEntry entry;
struct listnode *next;
}ListNode;



typedef struct list{ 
ListNode *head;
int size;
}List;



void CreateList(List *pl){ 
pl->head=NULL; 
pl->size=0;
} // (1)



int ListEmpty(List *pl){ 
return (pl->size==0); 
//or return !pl->head 
} // (1)



int ListFull(List *pl){
return 0; 
} // (1)



int ListSize(List *pl){
return pl->size;
} // (1)



void DestroyList(List *pl){ 
ListNode *q; 
while(pl->head){
q=pl->head->next;
free(pl->head);
pl->head=q; 
} 
pl->size=0;
}//we took it before many times: // (n)



void TraverseList(List* pl, void(*Visit)(ListEntry)){ 
ListNode *p=pl->head;
while(p){ 
(*Visit)(p->entry); 
p=p->next; }
}



void InsertList(int pos, ListEntry e, List *pl){
ListNode *p, *q; 
int i;
p=(ListNode *)malloc(sizeof(ListNode));
p->entry=e; 
p->next=NULL;
if (pos==0){//will work also for head equals NULL 
p->next=pl->head;
pl->head=p; 
} 
else{ 
for(q=pl->head, i=0; i<pos-1; i++) 
q=q->next; 
p->next=q->next; 
q->next=p;
} 
pl->size++; 
} // (n) but without shifting elements.



void DeleteList(int pos, ListEntry *pe, List *pl){ 
int i; 
ListNode *q, *tmp;
if (pos==0){ 
*pe=pl->head->entry;
tmp=pl->head->next;
free(pl->head);
pl->head=tmp;
}// it works also for one node 
else{ 
for(q=pl->head, i=0; i<pos-1; i++)
q=q->next;
*pe=q->next->entry;
tmp=q->next->next;
free(q->next); 
q->next=tmp;
}// check for pos=size-1 (tmp will be NULL) 
pl->size--; 
} //O(n) but without shifting elements.



void RetrieveList(int pos, ListEntry *pe, List *pl){ 
int i; 
ListNode *q;
for(q=pl->head, i=0; i<pos; i++)
  q=q->next; 
*pe=q->entry;
}



void ReplaceList(int pos, ListEntry e, List *pl){
int i; 
ListNode *q;
for(q=pl->head, i=0; i<pos; i++)
q=q->next;
q->entry=e;
}
